package main;
import java.io.IOException;

public class Driver {
	public static void main(String[] args) throws IOException
	{
		System.out.println("TEST");
		
		SenderParser sender = new SenderParser();
		// Put file bytes into fileData byte array
		byte[] fileData = "TEST".getBytes();
		sender.createAudioFile(fileData, "C:\\Users\\theholypiggy\\Documents\\Test.wav", 1, 14000, 500, /*5512*/22050, SenderParser.BIT_BY_BIT);
		
		/**
		 * For this transmission testing, using the following values for the audio file:
		 * transmissionSpeed = 1
		 * lowFrequency = 14000
		 * sensitivity = 500
		 * 
		 * We should see the following frequencies picked up by the microphone:
		 * 14000 15000 14500 15000 14000 15000 (LOCATOR)
		 * 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000
		 * 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 15000 (DESCRIPTOR - 1 (TRANSMISSION SPEED))
		 * 14000 15000 14500 14000 14500 15000 14000 14500 14000 15000 14500 15000 14000 14500 15000 14500
		 * 15000 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 (DESCRIPTOR - 14000 (LOW FREQUENCY))
		 * 14500 15000 14500 14000 14500 14000 15000 14000 15000 14000 15000 14000 15000 14500 15000 14500
		 * 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 (DESCRIPTOR - 500 (SENSITIVITY))
		 * 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500
		 * 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 14000 14500 15000 14500 (DESCRIPTOR - 2 (METHOD))
		 * 14000 15000 14500 15000 14500 15000 14500 14000 14500 15000 14500 14000 14500 15000 14500 15000
		 * 14500 15000 14500 15000 14500 14000 15000 14000 14500 15000 14500 15000 14500 15000 14500 14000 (DATA - "TEST")
		 * 
		 * Which corresponds to the following values assuming the range of the microphone is 14000 - 15000:
		 * 1 4 2 4 1 4 (LOCATOR)
		 * 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 - (0000000000000000)
		 * 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 4 - (0000000000000001) (DESCRIPTOR 1)
		 * 2 4 2 1 2 4 1 2 1 4 2 4 1 2 4 2 - (0100011001011010)
		 * 4 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 - (1100000000000000) (DESCRIPTOR 14000)
		 * 2 4 2 1 2 1 4 1 4 1 4 1 4 2 4 2 - (0100001111111010)
		 * 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 - (0000000000000000) (DESCRIPTOR 500)
		 * 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 - (0000000000000000)
		 * 1 2 1 2 1 2 1 2 1 2 1 2 1 2 4 2 - (0000000000000010) (DESCRIPTOR 2)
		 * 1 4 2 4 2 4 2 1 2 4 2 1 2 4 2 4 - (0101010001000101)
		 * 2 4 2 4 2 1 4 1 2 4 2 4 2 4 2 1 - (0101001101010100) (DATA "TEST")
		 */
		
		return;
	}
}
